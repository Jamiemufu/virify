// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator customer_generator {
  provider = "prisma-generator-fake-data"
}

model User {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  password           String
  role               Role     @default(USER)
  verificationStatus VerificationStatus @default(NILL)
  dob                DateTime?
  contact            String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relation to Agent model (if the user is an estate agent)
  agent              Agent?   @relation(fields: [agentId], references: [id])
  agentId            String?

  // Relation to Property model (if the user has properties)
  properties         Property[]

  // Relation to Listing model (if the user has listings)
  listings           Listing[]

  // Relation to PaymentInfo model (if the user has payment information)
  paymentInfo        PaymentInfo[]

  // Relation to Address model (for user profile verification)
  address            Address?
  addressId          String? @unique
}

enum VerificationStatus {
  PENDING
  VERIFIED
  NILL
}

model PaymentInfo {
  id                 String   @id @default(uuid())
  user               User     @relation(fields: [userId], references: [id])
  userId             String
  cardNumber         String
  cardHolderName     String
  expiryDate         DateTime
  cvv                Int
  billingAddress     Address   @relation(fields: [billingAddressId], references: [id])
  billingAddressId   String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Address {
  id                 String   @id @default(uuid())
  addressLine1       String
  addressLine2       String?
  city               String
  state              String
  postcode           String
  country            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  paymentInfo        PaymentInfo[]
  user               User?    @relation(fields: [userId], references: [id])
  userId             String? @unique
}

model Property {
  id                 String   @id @default(uuid())
  title              String
  price              Float
  priceType          PriceType[]
  propertyType       PropertyType[]
  location           String
  listingType        ListingType[]
  availabilityStatus AvailabilityStatus[]
  bedrooms          Int
  bathrooms         Int
  totalSize         Float
  yearBuilt         Int
  constructionType  String?
  roofType          String?
  floorLevel        Int?
  furnishingStatus  FurnishingStatus[]
  energyRating      String
  tenure            Tenure[]
  leaseTerm         Int? // If leasehold
  kitchenFeatures   String[]
  livingFeatures    String[]
  bathroomFeatures  String[]
  storageOptions    String[]
  outdoorSpaces     OutdoorSpace[]
  parkingOptions    ParkingOption[]
  securityFeatures  String[]
  amenities         Amenity[]
  councilTaxBand    String?
  serviceCharges    Float?
  groundRent        Float?
  mortgageEstimate  Float?
  deposit           Float?
  upfrontCosts      Float?
  images            Image[]
  videoTour         String?
  floorPlan         String?
  agent             Agent   @relation(fields: [agentId], references: [id])
  agentId           String
  investmentPotential String
  petPolicy         PetPolicy[]
  accessibilityFeatures String[]
  moveInDate        DateTime
  listings          Listing[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  User User[]
}

model Listing {
  id                 String   @id @default(uuid())
  property           Property @relation(fields: [propertyId], references: [id])
  propertyId         String
  listingType        ListingType[]
  price              Float
  availabilityStatus AvailabilityStatus[]
  agent              Agent    @relation(fields: [agentId], references: [id])
  agentId            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Additional fields for expanded listings
  description        String
  features           Feature[]

  User User[]
}

model Image {
  id         String   @id @default(uuid())
  url        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Agent {
  id         String   @id @default(uuid())
  name       String
  contact    String
  whatsapp   String?
  liveChat   String?
  properties Property[]
  listings  Listing[]

  User User[]
}


enum Role {
  USER
  AGENT
  ADMIN
}

enum PriceType {
 OFFERS_IN_EXCESS_OF
 GUIDE_PRICE
 OFFERS_IN_THE_REGION_OF
 PER_CALENDAR_MONTH
 PER_WEEK
}

enum PropertyType {
 HOUSE
 APARTMENT
 CONDO
 COMMERCIAL
 LAND
}

enum ListingType {
 FOR_SALE
 FOR_RENT
 SHORT_TERM_LET
 AUCTION
}

enum AvailabilityStatus {
 AVAILABLE
 UNDER_OFFER
 SOLD
 LET_AGREED
}

enum FurnishingStatus {
 FURNISHED
 UNFURNISHED
 PART_FURNISHED
}

enum Tenure {
 LEASEHOLD
 FREEHOLD
}

enum OutdoorSpace {
 GARDEN
 TERRACE
 BALCONY
 PATIO
 LAND // >1 acre
}

enum ParkingOption {
 GARAGE
 DRIVEWAY
 PERMIT_PARKING
 ON_STREET_PARKING 
}

enum Amenity {
 TRANSPORT_LINKS 
 SCHOOLS_UNIVERSITIES 
 HOSPITALS_MEDICAL 
 SHOPPING_ENTERTAINMENT 
 GREEN_SPACES 
}

enum PetPolicy {
 ALLOWED 
 NOT_ALLOWED 
}

// New enum for additional features in listings model

enum Feature {
 KITCHEN_FEATURES 
 LIVING_AREA_FEATURES 
 BATHROOM_FEATURES 
 STORAGE_SPACE 
 OUTDOOR_SPACE 
 PARKING 
 SECURITY_FEATURES 
 AMENITIES_NEARBY 
}

